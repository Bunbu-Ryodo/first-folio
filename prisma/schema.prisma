// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id      String      @id @default(uuid())
  email   String   @unique
  password    String
  introduce Introduce?
  tech Tech?
  projects Project[]
  socials Socials?
  cv CV?
  endorsements Endorsement[]
}

model Introduce {
  id     Int     @id @default(autoincrement())
  name   String?  @db.VarChar(255)
  job_title String? @db.VarChar(255)
  bio String? @db.VarChar(255)
  person User @relation(fields: [personId], references: [id])
  personId String @unique
}

model Tech {
  id  Int   @id @default(autoincrement())
  technologies String[]
  experience String?
  developer User @relation(fields: [developerId], references:[id])
  developerId String @unique
}

model Project {
  id  Int   @id @default(autoincrement())
  title String?
  repo  String?
  url String?
  description String?
  imageUrls String[]
  imagePaths String[]
  creator User @relation(fields: [creatorId], references:[id])
  creatorId String 
}

model Socials {
  id Int @id @default(autoincrement())
  contact_email String?
  x String?
  instagram String?
  facebook String?
  linked_in String?
  website String? 
  contact User @relation(fields: [contactId], references: [id])
  contactId String @unique
}

model CV {
  id Int @id @default(autoincrement())
  cv Bytes?
  jobSeeker User @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String @unique
}

model Endorsement {
  id Int @id @default(autoincrement())
  name String?
  comments String?
  candidate User @relation(fields: [candidateId], references: [id])
  candidateId String 
}